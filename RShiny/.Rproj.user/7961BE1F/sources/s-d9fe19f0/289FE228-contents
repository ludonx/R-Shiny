#library(mongolite)


# "pwd":,
# "host" : ,
# "username" : , 

pwd <- URLencode(app$config$pwd,reserved = TRUE)
options(mongodb = list(
  "host" = app$config$host,
  "username" = app$config$username,
  "password" =pwd
))

loadDataBase <- function(databaseName,collectionName){
  dataDase <- mongo(collection = collectionName,
                    url = sprintf(
                      "mongodb://%s:%s@%s/%s",
                      options()$mongodb$username,
                      options()$mongodb$password,
                      options()$mongodb$host,
                      databaseName)
  )
  dataDase
}

# recuperation de toutes les données d'une collection
findAll<-function(databaseName,collectionName){
  
  db<-loadDataBase(databaseName,collectionName)
  data<-db$find()
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  return(data)
}

findLimit<-function(databaseName,collectionName,limit){
  
  db<-loadDataBase(databaseName,collectionName)
  data<-db$find(limit=limit)
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  return(data)
}
###########################################################
findQuery<-function(databaseName,collectionName,myQueryJson){
  
  db<-loadDataBase(databaseName,collectionName)
  data<-db$find(query=myQueryJson)
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  return(data)
  
}

###########################################################
findQueryLimit<-function(databaseName,collectionName,myQueryJson,limit){
  
  db<-loadDataBase(databaseName,collectionName)
  data<-db$find(query=myQueryJson,limit=limit)
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  return(data)
  
}

###########################################################
countAll<-function(databaseName,collectionName){
  
  db<-loadDataBase(databaseName,collectionName)
  data<-db$count()
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  return(data)
}

###########################################################
countQuery<-function(databaseName,collectionName,myQueryJson){
  
  db<-loadDataBase(databaseName,collectionName)
  data<-db$count(query=myQueryJson)
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  return(data)
}

###########################################################
aggregateQuery <-function(databaseName,collectionName,myQueryJson){
  db<-loadDataBase(databaseName,collectionName)
  data<-db$aggregate(myQueryJson)
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  return(data)
}

###############################################################
listCollectionByName<-
  function(databaseName,filter,equal=TRUE){
    colonne<-"name"
    db<-loadDataBase(databaseName,'')
    listCollection<-''
    if(equal==FALSE){
      listCollection<-db$run(paste0('{"listCollections":1, "filter":',myQueryChaineNe(colonne,filter),',"nameOnly": true}'))
    }else{
      listCollection<-db$run(paste0('{"listCollections":1, "filter":',myQueryChaine(colonne,filter),',"nameOnly": true}'))
    }
    data<-listCollection$cursor$firstBatch$name
    # Automatically disconnect when connection is removed
    rm(db)
    gc()
    return(data)
    
  }
###############################################################

getGeneAbundance<-
  function(globalDatabase,projectDatabase,collectionICGgenes,collectionCAG,MGS_name,CollectionGeneAbundance){
    # méthode 1
    # on récupère les ids via la collection CAG
    result<-
      findQuery(globalDatabase,
                collectionCAG,
                myQueryJson =myQueryUnique("MGS",MGS_name) )
    # car il y a une seule valeur 
    MGS_name<-result[1,1]
    MGS_GeneIDs<-result[1,2]
    vectorGeneIDs<-unlist(MGS_GeneIDs, use.names=FALSE)
    
    #on récupère les GeneNames correspondant au GeneIDs
    Gene<-findQuery(globalDatabase,collectionICGgenes,
                    myQueryUniqueIN_integer('GeneID',vectorGeneIDs))
    MGS_GeneName<-Gene["GeneName"]
    # on la converti en un vecteur ( ce data frame à une seul colonnes)
    vectorGeneNames<-c()
    for(i in 1:nrow(MGS_GeneName)){
      vectorGeneNames<-append(vectorGeneNames,MGS_GeneName[i,1])
    } 
    
    # on recuperer les abondances des gènes sur la collection GeneAbundance
    GeneAbundance<-
      findQuery(projectDatabase,
                CollectionGeneAbundance,
                myQueryUniqueIN('_row',vectorGeneNames)
      )
    
    return(GeneAbundance)
  }


############################################################
AddIndex<-
  function(databaseName,collectionName,colonne){
    db<-loadDataBase(databaseName,collectionName)
    db$index(add = paste0('{"',colonne,'" : 1}'))
    # Automatically disconnect when connection is removed
    rm(db)
    gc()
  }

############################################################
getProjectUser<-
  function(databaseName,collectionUser,collectionProject,userEmail,catalogselected="cat_hs9.9_v1",keyUser="email",keyProject="name",keycatalog="catalog"){
    # on récupére la liste des utilisateurs d'un projet
    infoUser<-findQuery(databaseName,collectionUser,myQueryUnique(keyUser,userEmail))
    projectUser<-infoUser$Projects[1]
    vectorProjectUser<-unlist(projectUser, use.names=FALSE)
    # on récupére le data frame des projets de cette utilisateur
    query<-
      myQueryConstraintN(
        list(
          myConstraintUnique(keycatalog,catalogselected),
          myConstraintUniqueIN(keyProject,vectorProjectUser)
          )
        )
    infoProject<-findQuery(databaseName,collectionProject,query)
    
    return(infoProject)
  }

############################################################
addProject<-
  function(databaseName,
           collectionProject,
           NameProject,
           collectionGeneAbundance,
           collectionMGSabundance,
           collectionSampleMetadata,
           NameDataBaseProject){
    
    if(nrow(findQuery(databaseName,collectionProject,myQueryUnique("Name",NameProject)))>0){
      return(FALSE)
    }else{
      db<-loadDataBase(databaseName,collectionProject)
      
      data<-paste0('{ "Name": "',NameProject
                   ,'", "GeneAbundance": "',collectionGeneAbundance
                   ,'", "MGSabundance": "',collectionMGSabundance
                   ,'", "SampleMetadata": "',collectionSampleMetadata
                   ,'", "dataBase": "',NameDataBaseProject,'" }')
      # data<-paste0('{ "Name": "',NameProject)
      # data<-paste0(data,'", "GeneAbundance": "',collectionGeneAbundance)
      # data<-paste0(data,'", "MGSabundance": "',collectionMGSabundance)
      # data<-paste0(data,'", "SampleMetadata": "',collectionSampleMetadata)
      # data<-paste0(data,'", "dataBase": "',NameDataBaseProject,'" }')
      
      # on insert les données : MGS et GenesIDs
      db$insert(data)
      # Automatically disconnect when connection is removed
      rm(db)
      gc()
      return(TRUE)
    }
    
   
  }

############################################################
addProjectToUser<-
  function(databaseName,collectionProject,collectionUser,userEmail,newProject){
    infoUser<-findQuery(databaseName,collectionUser,myQueryUnique("email",userEmail))
    projectUser<-infoUser$Projects[1]
    vectorProjectUser<-unlist(projectUser, use.names=FALSE)
    
    if((newProject %in% vectorProjectUser)==FALSE){
      db<-loadDataBase(databaseName,collectionUser)
      query<-paste0('{ "email": "',userEmail,'" }')
      updateVal<-paste0('{ "$push": { "Projects": "',newProject,'" } }')
      db$update(query,updateVal)
      # Automatically disconnect when connection is removed
      rm(db)
      gc()
      return(TRUE)
    }else{
      return(FALSE)
    }
    
  }
############################################################
myUpdateQueryMongoSimple<-
  function(databaseName,collectionName,query,updateValQuery){
    db<-loadDataBase(databaseName,collectionName)
    db$update(query,updateValQuery,multiple = TRUE)
    # Automatically disconnect when connection is removed
    rm(db)
    gc()

  }
############################################################
myUpdateQueryMongo<-
  function(databaseName,collectionName,colonne,oldValue,newValue){
    db<-loadDataBase(databaseName,collectionName)
    query<-myQueryUnique(colonne,oldValue)
    updateVal<-paste0('{"$set":{"',colonne,'": "',newValue,'"}}')
    db$update(query,updateVal,multiple = TRUE)
    # Automatically disconnect when connection is removed
    rm(db)
    gc()

  }

myDeleteQueryField<-
  function(databaseName,collectionName,colonne){
    db<-loadDataBase(databaseName,collectionName)
    query<-paste0('{}')
    updateVal<-paste0('{"$unset":{"',colonne,'": ""}}')
    db$update(query,updateVal,multiple = TRUE)
    # Automatically disconnect when connection is removed
    rm(db)
    gc()

  }

############################################################
getVectorOfCollectionByField<-
  function(databaseName,collectionName,colonne){
    
    myField<-paste0('{"',colonne,'" : true}')
    db<-loadDataBase(databaseName,collectionName)
    myData<-db$find(fields=myField)
    myDataField<-myData[colonne]
    
    myVector<-vector(mode="character", length=nrow(myData))
    for(i in 1:length(myVector))
    {
      myVector[i]<-myDataField[i,1]
    }
    # Automatically disconnect when connection is removed
    rm(db)
    gc()

    return(myVector)
  }

############################################################
changeCollectionName<-
  function(databaseName,oldName,newName){
    db<-loadDataBase(databaseName,oldName)
    db$rename(name = newName)
    # Automatically disconnect when connection is removed
    rm(db)
    gc()
  }
############################################################
addNewUser<-
  function(databaseName,collectionName,Name,First_name,Last_name,Password,email,profil,Projects="none"){
  queryInsert<-
    paste0('{"Name" : "',Name,
           '", "First_name" : "',First_name,
           '", "Last_name" : "',Last_name,
           '", "Password" : "',Password,
           '", "email" : "',email,
           '", "profil" : "',profil,
           '", "date_ajout" : "',as.character(Sys.Date()),
           '", "connecter" : "0" }')
  
  db<-loadDataBase(databaseName,collectionName)
  db$insert(queryInsert)
  # Automatically disconnect when connection is removed
  rm(db)
  gc()
  myUpdateQueryMongoSimple(databaseName,
                           collectionName,
                           myQueryUnique('email',email),
                           myQueryPushChaine('Projects',Projects)
  )
  }
#######################################################################
deleteUser<-
  function(databaseName,collectionUserDelete,collectionUser,Name,First_name,Last_name,Password,email,profil,date_ajout,Projects="none"){
    db<-loadDataBase(databaseName,collectionUser)
    db$remove(paste0('{"email" : "',email,'"}'), just_one = TRUE)
    # Automatically disconnect when connection is removed
    rm(db)
    gc()
    
    
    queryInsert<-
      paste0('{"Name" : "',Name,
             '", "First_name" : "',First_name,
             '", "Last_name" : "',Last_name,
             '", "Password" : "',Password,
             '", "email" : "',email,
             '", "profil" : "',profil,
             '", "date_ajout" : "',date_ajout,
             '", "date_suppression" : "',as.character(Sys.Date()),
             '"}')
    
    db<-loadDataBase(databaseName,collectionUserDelete)
    db$insert(queryInsert)
    # Automatically disconnect when connection is removed
    rm(db)
    gc()
  }
############################################################
ModifierUser<-
  function(databaseName,collectionName,Name,First_name,Last_name,Password,email,profil){
    queryInsert<-
      paste0('{"Name" : "',Name,
             '", "First_name" : "',First_name,
             '", "Last_name" : "',Last_name,
             '", "Password" : "',Password,
             '", "email" : "',email,
             '", "profil" : "',profil,
             '", "date_ajout" : "',as.character(Sys.Date()),
             
             '"}')
    
    
    db<-loadDataBase(databaseName,collectionName)
    db$update('{"email":"',email,'"}', '{"$set":',queryInsert,'}')
    # Automatically disconnect when connection is removed
    rm(db)
    gc()
  }
################################################################
confirmeUser<-
  function(databaseName,collectionName,Name,First_name,Last_name,Password,Password_Confirm,email,profil,Projects="none"){
    if(Password==Password_Confirm){
      userExiste<-findQuery(databaseName,collectionName,myQueryUnique("Name",Name))
      if(nrow(userExiste)>0){
        return(paste0("ERREUR : Cette utilisateur existe déjà"))
      }else{
        userExiste<-findQuery(databaseName,collectionName,myQueryUnique("email",email))
        if(nrow(userExiste)>0){
          return(paste0("ERREUR : Cette email est dèjà utilisé"))
        }else{
          return(TRUE)
          
        }#end else
      }#end else
      
    }else{
      return(paste0("ERREUR : Mot de passe incorrecte..."))
    }#end else
    
  }


######################################################################

RenameCagField<-
  function(databaseName,collectionName,suffix="A"){
    d<-Sys.time()
    cag<-findLimit(databaseName,collectionName,2)
    cat(Sys.time()-d)
    names<-colnames(cag)
    d<-Sys.time()
    for(i in 1:length(names) ){
      #suffix<-i
      myUpdateQueryMongoSimple(databaseName,
                               collectionName,
                               '{}',
                               myQueryRenameField(names[i],paste0(names[i],"_",suffix)))
      
    }
    cat(Sys.time()-d)
  }

###########################################################################

concatCollection<-
  function(listeDatabaseName,listeCollection){
    allCollection<-data.frame()
    nd<-length(listeDatabaseName)
    nc<-length(listeCollection)
    if(nc>0 && nd>0){
      if(nc==nd){
        allCollection<-findAll(listeDatabaseName[1],listeCollection[1])
        #cat(listeCollection[1])
      }else{
        return(F)
      }
      
    }else{
      return(F)
    }
    
    for(i in 1:nc){
      if(i>1){
        collectionName<-listeCollection[i]
        databaseName<-listeDatabaseName[i]
        
        data<-findLimit(databaseName,collectionName,2)
        communColonne<-intersect(colnames(allCollection),colnames(data))
        communligne<-intersect(row.names(allCollection),row.names(data))
        if(length(communColonne)==0 && length(communligne)==length(row.names(data))){
          data<-findAll(databaseName,collectionName)
          #cat(collectionName)
          allCollection<-merge(allCollection,data,by.x=0,by.y=0)
          
          # on supprime la colonne Row.names
          row.names(allCollection) <- allCollection$Row.names
          allCollection$Row.names<-NULL
          #cat("merge")
        }else{
          # deux abondance de MGS ne peuvent pas avoir des colonnes avec des nom identique
          # mais elles doivent avoire le même nombre de lignes
          return(data.frame())
          
        }
      }#end if
      
    }#end for
    return(allCollection)
    
  }
###################################################################################################

getDataFrame<-
  function(){
    databaseName<-'iogold'
    collectionJointure<-"jointures"
    ### (1)
    cat('1 - \n')
    M00001<-findQuery(databaseName,
                      "def_ko_Module_associations_KEGGdb_5_19",
                      myQueryChaine("moduleIDs","M00001"))
    
    listeKoIds<-M00001$koIDs
    
    ### les keys
    key<-
      getCollectionKeyMongo(databaseName,
                            collectionJointure,
                            "def_genes_cat_hs9.9_v1",
                            "def_ko_definition_KEGGdb_5_19",
                            "cat_hs9.9_v1")
    key2<-
      getCollectionKeyMongo(databaseName,
                            collectionJointure,
                            "def_genes_cat_hs9.9_v1",
                            "def_cag_cat_hs9.9_v1",
                            "cat_hs9.9_v1")
    ### le df initial
    
    mycag<-findAll(databaseName,'def_cag_cat_hs9.9_v1')
    mydata<-mycag
    row.names(mydata)<-mydata$MGS
    mydata$GeneIDs<-NULL
    
    ### construction du df
    for(i in 1:length(listeKoIds)){
      
      #for(i in 1:2){
      max<-length(listeKoIds)
      cat('2 - ::',listeKoIds[i],':: ',i,'/ ',max,'\n')
      ### (2)
      #i<-1
      K0<-findQuery(databaseName,
                    "def_genes_cat_hs9.9_v1",
                    myQueryUnique(key,listeKoIds[i]))
      # K02<-findQuery(databaseName,
      #                "def_genes_cat_hs9.9_v1",
      #                myQueryConstraintN(
      #                  list(
      #                    myConstraintUnique(key,listeKoIds[i]),
      #                    myConstraintMinMaxN("MGS",1,1)
      #                  )
      #                ))
      
      listGeneIDs<-K0$GeneID
      
      for(k in 1:length(listGeneIDs)){
        ### (3)
        cat('3 - ::',k,' Geneid = ',listGeneIDs[k],'\n')
        CAG000X<-findQuery(databaseName,
                           "def_cag_cat_hs9.9_v1",
                           myQueryUniqueIN_integer(key2,listGeneIDs[k]))
        cat('-- ',CAG000X$MGS,'\n')
        listCAG000X<-CAG000X$MGS # 1 ou +1 resultat exeple : id=1392161
        
       if(listeKoIds[i] %in% colnames(mydata)){ # si le ko est deja dans le dataframe
         mydata[row.names(mydata) %in% CAG000X$MGS,listeKoIds[i]]<-mydata[row.names(mydata) %in% CAG000X$MGS,listeKoIds[i]] + 1
         cat('-deja ',mydata[row.names(mydata) %in% CAG000X$MGS,listeKoIds[i]],'\n')
       }else{
         cat('nope--\n')
         mydata[,listeKoIds[i]]<-0
         mydata[row.names(mydata) %in% CAG000X$MGS,listeKoIds[i]]<-1
       }
        
      }#end for
      
      
      
    }#end for
    mydata[is.na(mydata)] <- 0
    
    mydata$MGS<-NULL
    return(mydata)
  }