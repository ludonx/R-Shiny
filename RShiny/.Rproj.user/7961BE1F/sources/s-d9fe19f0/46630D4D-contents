serverLes_utilisateurs<-
  function(input, output, session,globalInformation){
   
    output$uiLes_utilisateurs<-renderUI(
      fluidRow(
        column(5,withSpinner(DT::dataTableOutput('dataTable_Les_utilisateurs'))),
        column(2,
               box(
                 title = "Caractéristique", status = "primary", solidHeader = TRUE,
                 collapsible = TRUE,collapsed = F, width = 12,
                 uiOutput("uiCheckbox_Les_utilisateurs")
               ) #end box
        ), #end column
        column(5,
               box(
                 title = "Suppression & Modification",  solidHeader = TRUE, #status = "primary",
                 collapsible = TRUE,collapsed = F, width = 12,
                 fluidRow(
                   DT::dataTableOutput('dataTable_Les_utilisateurs_selected')
                 ),
                 fluidRow(
                   column(4,""),
                   column(2,
                          actionButton(inputId = paste0("ActionModifierUtilisateur"),
                                       label = "Modifier",
                                       icon("user-edit"), 
                                       style="color: #fff; background-color: #3c936f; border-color: #36aa7a"
                          )
                   ),#end column
                   column(3,
                          actionButton(inputId = paste0("ActionSupprimerUtilisatuer"),
                                       label = "Supprimer",
                                       icon("user-minus"), 
                                       style="color: #fff; background-color: #b73263; border-color: #b7319c"
                          )
                   )#end column
                   
                 ),#end fluidRow
                 fluidRow(
                   column(6,""),
                   column(6,htmlOutput(outputId = "ERROR_MGS_Modifier_un_utilisateur"))
                  
                 )#end fluidRow
                 
                 
               )#end column
        ) #end box
        
      )#end fluidRow
    )#end output$uiLes_utilisateurs
    
    #####################################################################################
    ##### récupération des données
    dataFrameLesUtilisateurs<-reactive({
      # Create a Progress object
      progress <- shiny::Progress$new()
      # Make sure it closes when we exit this reactive, even if there's an error
      on.exit(progress$close())
      progress$set(message = "Récupération de la liste des utilisateurs", value = 0)
      progress$inc(1/2)
      dataFrameLesUtilisateurs<-
        findAll(
          globalInformation$globalDatabase,
          globalInformation$usersCollections
        )
      globalInformation$dataFrameLesUtilisateurs<-dataFrameLesUtilisateurs
      progress$inc(1/2)
      
      return(dataFrameLesUtilisateurs)
      
    })
    
    ##### data frame
    output$dataTable_Les_utilisateurs<- DT::renderDataTable({
      req(input$Checkbox_Les_utilisateurs)
      
      listCol<-input$Checkbox_Les_utilisateurs
      if(length(listCol)>1)
        DT::datatable(globalInformation$dataFrameLesUtilisateurs[,listCol],filter = 'top',selection = 'multiple') # vous pouvez changé single par multiple
      
    })
    
    ##### checkbox
    output$uiCheckbox_Les_utilisateurs <-renderUI({
      checkboxGroupInput("Checkbox_Les_utilisateurs", 
                         " ",
                         names(dataFrameLesUtilisateurs()),
                         selected =colnames(dataFrameLesUtilisateurs())[1:2]
      )
      
    })
    
    #######################################################################################
    
    ############ Modification et Suppression
    ##### les utilisateur selectionée
    dataFrameLesUtilisateursSelected<-eventReactive(input$dataTable_Les_utilisateurs_rows_selected,{
      
      listeUser = input$dataTable_Les_utilisateurs_rows_selected
      dataFrameLesUtilisateursSelected<-data.frame()
      
      for(j in 1:length(listeUser)){
        dataFrameLesUtilisateursSelected<-
          rbind(dataFrameLesUtilisateursSelected,globalInformation$dataFrameLesUtilisateurs[listeUser[j],])
      } 
      return(dataFrameLesUtilisateursSelected)
    })
    ##### data frame résultat
    output$dataTable_Les_utilisateurs_selected<- DT::renderDataTable({
      req(input$Checkbox_Les_utilisateurs)
      
      listCol<-input$Checkbox_Les_utilisateurs
      if(length(listCol)>1)
        DT::datatable(dataFrameLesUtilisateursSelected()[,listCol],filter = 'top',selection = 'single') # vous pouvez changé single par multiple
      
    })
    
    ##### Suppression
    observeEvent(input$ActionSupprimerUtilisatuer,{
      req(input$dataTable_Les_utilisateurs_rows_selected)
      
      listeUser = input$dataTable_Les_utilisateurs_rows_selected
      vectorUser<-vector(mode="character", length=length(listeUser))
      
      for(j in 1:length(vectorUser)){
        #vectorUser[j]<-dataFrameLesUtilisateurs()[listeUser[j],"email"]
        
        ### faire la supression ici
        if("date_ajout"%in% colnames(globalInformation$dataFrameLesUtilisateurs)){
          date_ajout<-globalInformation$dataFrameLesUtilisateurs[listeUser[j],"date_ajout"]
        }else{
          date_ajout<-NA
        }
        
        # Create a Progress object
        progress <- shiny::Progress$new()
        # Make sure it closes when we exit this reactive, even if there's an error
        on.exit(progress$close())
        progress$set(message = paste0("Suppression de ",globalInformation$dataFrameLesUtilisateurs[listeUser[j],"First_name"]), value = 0)
        progress$inc(1/2)

        deleteUser(globalInformation$globalDatabase,
                   globalInformation$usersCollectionsDelete,
                   globalInformation$usersCollections,
                   globalInformation$dataFrameLesUtilisateurs[listeUser[j],"Name"],
                   globalInformation$dataFrameLesUtilisateurs[listeUser[j],"First_name"],
                   globalInformation$dataFrameLesUtilisateurs[listeUser[j],"Last_name"],
                   globalInformation$dataFrameLesUtilisateurs[listeUser[j],"Password"],
                   globalInformation$dataFrameLesUtilisateurs[listeUser[j],"email"],
                   globalInformation$dataFrameLesUtilisateurs[listeUser[j],"profil"],
                   date_ajout,
                   Projects="none")
        
        
        progress$inc(1/2)
          
       
      }#end for
      output$ERROR_MGS_Modifier_un_utilisateur<-renderText({
        paste("<font color=\"#36aa7a\"><b>", "Suppression effectuer !", "</b></font>")
      })
      
      progress$inc(1/3,detail="Actualisation de la liste des utilisateurs")
      dataFrameLesUtilisateurs<-
        findAll(
          globalInformation$globalDatabase,
          globalInformation$usersCollections
        )
      globalInformation$dataFrameLesUtilisateurs<-dataFrameLesUtilisateurs
      
    })
    
    #######################################################################################
    ##### Modification
    #######################################################################################
    ##### IHM
    #######################################################################################
    output$uiModifier_un_utilisateur<-renderUI({
      req(input$dataTable_Les_utilisateurs_selected_rows_selected)
      
      listeUser = input$dataTable_Les_utilisateurs_selected_rows_selected
      
      Last_name<-dataFrameLesUtilisateursSelected()[listeUser[1],"Last_name"]
      First_name<-dataFrameLesUtilisateursSelected()[listeUser[1],"First_name"]
      email<-dataFrameLesUtilisateursSelected()[listeUser[1],"email"]
      profil<-dataFrameLesUtilisateursSelected()[listeUser[1],"profil"]
      
      
      fluidPage(
        fluidRow(
          column(6,""),
          column(6,
                 box(
                   title = "Formulaire de modification", status = "success", width = 12,
                   fluidRow(
                     column(6,
                            textInput(inputId ="Modifier_un_utilisateur_Last_name" ,label ="Nom : ",value = Last_name  ),
                            textInput(inputId ="Modifier_un_utilisateur_First_name" ,label ="Prenom : " ,value = First_name ),
                            
                            textInput(inputId ="Modifier_un_utilisateur_email" ,label ="Email : ",value =  email )
                     ),
                     column(6,
                            passwordInput(inputId ="Modifier_un_utilisateur_pwd" ,label ="Ancien mot de passe : "),
                            passwordInput(inputId ="Modifier_un_utilisateur_pwd_confirmer" ,label ="Nouveau le mot de passe : "),
                            
                            selectInput(inputId ="Modifier_un_utilisateur_profil" ,label ="Profil : " ,choices = c("chercheur","administrateur"),selected =profil )
                            
                     )
                   )#end fluidRow
                   
                   
                  
                 )
                 
          )
          
        )#end fluidRow
        
      )#end fluidPage
      
    })#end output$uiModifier_un_utilisateur
    #######################################################################
    #### ActionButton
    #######################################################################################
    
    observeEvent(input$ActionModifierUtilisateur,{
      req(input$dataTable_Les_utilisateurs_selected_rows_selected)
      
      listeUser = input$dataTable_Les_utilisateurs_selected_rows_selected
      
      
      #dataFrameLesUtilisateursSelected()[listeUser[1],"email"]

      # Create a Progress object
      progress <- shiny::Progress$new()
      # Make sure it closes when we exit this reactive, even if there's an error
      on.exit(progress$close())
      progress$set(message = paste0("Modification en cours ... "), value = 0)
      progress$inc(1/3,detail='test user ...')
      
      testUser<-
        confirmeUser(
          globalInformation$globalDatabase,
          globalInformation$usersCollections,
          input$Modifier_un_utilisateur_Last_name,
          input$Modifier_un_utilisateur_First_name,
          input$Modifier_un_utilisateur_Last_name,
          input$Modifier_un_utilisateur_pwd,
          input$Modifier_un_utilisateur_pwd_confirmer,
          input$Modifier_un_utilisateur_email,
          input$Modifier_un_utilisateur_profil)
      progress$inc(1/3)
      if(testUser==T){
        ModifierUser(globalInformation$globalDatabase,
                   globalInformation$usersCollections,
                   input$Modifier_un_utilisateur_Last_name,
                   input$Modifier_un_utilisateur_First_name,
                   input$Modifier_un_utilisateur_Last_name,
                   input$Modifier_un_utilisateur_pwd,
                   input$Modifier_un_utilisateur_email,
                   input$Modifier_un_utilisateur_profil
        )
        
        
        output$ERROR_MGS_Modifier_un_utilisateur<-renderText({
          paste("<font color=\"#36aa7a\"><b>", "Modification effectuer !", "</b></font>")
        })
        
        
        
        
        progress$inc(1/3,detail="Actualisation de la liste des utilisateurs")
        dataFrameLesUtilisateurs<-
          findAll(
            globalInformation$globalDatabase,
            globalInformation$usersCollections
          )
        globalInformation$dataFrameLesUtilisateurs<-dataFrameLesUtilisateurs
        
        
        
        
      }else{
        progress$inc(1/3)
        
        output$ERROR_MGS_Modifier_un_utilisateur<-renderText({
          paste("<font color=\"#a9355a\"><b>", testUser, "</b></font>")
        })
      }
      
      
    })
    
    ########################################
  }#end serverLes_utilisateurs